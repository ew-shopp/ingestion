{"transformationType":"graft","transformationCommand":"my-graft","code":"(def graph0 (prefixer \"http://jot-im.com/\"))\n\n(def jot (prefixer \"http://jot-im.com/rdf-example#\")) \n(def rdf:type (rdf \"type\"))\n(def google (prefixer \"https://www.google.com/rdf#\")) \n(def google:AdWord (google \"AdWord\"))\n(def rdf:label (rdf \"label\"))\n(def jot:belongsToAdGroup (jot \"belongsToAdGroup\"))\n(def jot:hasMatch (jot \"hasMatch\"))\n(def google:AdGroup (google \"AdGroup\"))\n(def jot:Campaign (jot \"Campaign\"))\n(def jot:category (jot \"category\"))\n(def jot:Category (jot \"Category\"))\n(def google:AdWordMatch (google \"AdWordMatch\"))\n(def google:matchType (google \"matchType\"))\n(def google:numberOfClicks (google \"numberOfClicks\"))\n(def google:numberOfImpressions (google \"numberOfImpressions\"))\n(def google:adPosition (google \"adPosition\"))\n(def dbp (prefixer \"http://dbpedia.org/ontology/\")) \n(def dbp:date (dbp \"date\"))\n\n(defn double-literal [s] (if (nil? (re-matches (read-string \"#\\\"[0-9.]+\\\"\") s)) 0 (Double/parseDouble s)))\n(defn integer-literal [s] (if (nil? (re-matches (read-string \"#\\\"[0-9.]+\\\"\") s)) 0 (Integer/parseInt s)))\n(defn join [& strings] (clojure.string/join \" \" strings))\n(defn join-with [sep] (fn [& strings] (clojure.string/join sep strings)))\n(defn organize-date \"Transform date dd/mm/yyyy ~> yyyy-mm-dd\" [date] (when (seq date) (let [[d m y] (clojure.string/split date (read-string \"#\\\"/\\\"\"))] (apply str (interpose \"-\" [y m d])))))\n(defn remove-blanks [s] (when (seq s) (clojure.string/replace s \" \" \"\")))\n(defn replace-varible-string [cell] (-> cell (clojure.string/replace (read-string \"#\\\".* #\\\"\") \"number\") (clojure.string/replace (read-string \"#\\\"[0-9]{4} \\\"\") \"\")))\n(def string-literal s)\n(defn stringToNumeric [x] (if (= \"\" x) nil (if (.contains x \".\") (Double/parseDouble x) (Integer/parseInt x))))\n(defn titleize [st] (when (seq st) (let [a (clojure.string/split st (read-string \"#\\\" \\\"\")) c (map clojure.string/capitalize a)] (->> c (interpose \" \") (apply str) clojure.string/trim))))\n(def transform-gender {\"f\" (s \"female\") \"m\" (s \"male\")})\n(defn get-lat-long-strings-replacement [easting northing hemisphere zoneNumber] (let [utmCoords (. gov.nasa.worldwind.geom.coords.UTMCoord fromUTM (Integer/parseInt zoneNumber) (if (= hemisphere \"N\") \"gov.nasa.worldwind.avkey.North\" (if (= hemisphere \"S\") \"gov.nasa.worldwind.avkey.East\" (throw (Exception. \"Wrong hemisphere input\")))) (Double/parseDouble easting) (Double/parseDouble northing))] (vector (re-pattern easting) (str (.getDegrees (.getLongitude utmCoords))) (re-pattern northing) (str (.getDegrees (.getLatitude utmCoords))))))\n(defn replace-several [content replacements] (let [replacement-list (partition 2 replacements)] (reduce (fn [arg1 arg2] (apply clojure.string/replace arg1 arg2)) content replacement-list)))\n(defn convert-col-lat-long [col hemisphere zoneNumber] (let [all-coords (re-seq (re-pattern \"-?[0-9]{1,13}.[0-9]+\") col)] (replace-several col (flatten (map (fn [coord-pair] (get-lat-long-strings-replacement (nth coord-pair 0) (nth coord-pair 1) hemisphere zoneNumber)) (partition 2 all-coords))))))\n(defn fill-when [col] (grafter.sequences/fill-when col))\n(def not-empty? (complement empty?))\n(defn remove-dashes \"Transforms text\" [s] (-> s (clojure.string/replace \"--\" \"\")))\n(defn analyse-object \"\" [] ())\n(defn flatten-date \"Transforms text\" [s] (-> s (clojure.string/replace \"-\" \"\") (clojure.string/replace \":\" \"\") (clojure.string/replace \" \" \"\") (clojure.string/replace \"\" \"\")))\n(defn match-label \"\" [keyword date day country region city] (str \"Match of keyword '\" keyword \"' on \" date \"(\" day \") in \" country \"/\" region \"/\" city))\n(defn remove-time \"Transforms text\" [s] (-> s (clojure.string/replace \"00:00:00\" \"\")))\n(defn create-xsd-datetime \"Transforms text\" [s] (-> s (clojure.string/replace \" \" \"T\")))\n(defn create-match-id \"\" [adgr kw city country region lang date] (str adgr \"-\" kw \"-\" city \"-\" country \"-\" region \"-\" lang \"-\" date))\n(def make-graph (graph-fn [{:keys [AdGroupId KeywordId City CountryTerritory Region StrRegion StrCity Country Language Category CampaignName Date DayOfWeek MonthOfYear Keyword MatchType Clicks Impressions GoogleAdPosition flat-date match-id date-no-secs match-label xsd-datetime DayOfWeek MonthOfYear City StrCity CountryTerritory Region StrRegion Country Language Date flat-date date-no-secs]}] (graph \"http://jot-im.com/\" [(jot KeywordId) [rdf:type google:AdWord] [rdf:label (datatypes/convert-literal Keyword \"string\" :lang-tag \"en\")] [jot:belongsToAdGroup (jot AdGroupId)] [jot:hasMatch (google match-id)]] [(jot AdGroupId) [rdf:type google:AdGroup] [rdf:type jot:Campaign] [rdf:label (datatypes/convert-literal CampaignName \"string\" :lang-tag \"en\")] [jot:category (jot Category)]] [(jot Category) [rdf:type jot:Category] [rdf:label (datatypes/convert-literal Category \"string\" :lang-tag \"en\")]] (if (not-empty? GoogleAdPosition) [(google match-id) [google:adPosition (datatypes/convert-literal GoogleAdPosition \"string\" :on-empty \"0.0\")]]) [(google match-id) [rdf:type google:AdWordMatch] [rdf:label (datatypes/convert-literal match-label \"string\" :lang-tag \"en\")] [google:matchType (datatypes/convert-literal MatchType \"string\" :lang-tag \"en\")] [google:numberOfClicks (datatypes/convert-literal Clicks \"string\" :on-empty \"0\" :lang-tag \"en\")] [google:numberOfImpressions (datatypes/convert-literal Impressions \"string\" :on-empty \"0\")] [dbp:date (datatypes/convert-literal xsd-datetime \"date\")]])))\n\n(defpipe my-pipe \"Grafter pipeline for data clean-up and preparation.\" [data-file] (-> (read-dataset data-file) (make-dataset [:AdGroupId :KeywordId :City :CountryTerritory :Region :StrRegion :StrCity :Country :Language :Category :CampaignName :Date :DayOfWeek :MonthOfYear :Keyword :MatchType :Clicks :Impressions :GoogleAdPosition]) (drop-rows 1) (mapc {:City remove-dashes :DayOfWeek trim :Clicks trim :Impressions trim :Date trim :GoogleAdPosition trim :KeywordId trim}) (derive-column :flat-date [:Date] flatten-date) (derive-column :match-id [:AdGroupId :KeywordId :City :CountryTerritory :Region :Country :flat-date] create-match-id) (derive-column :date-no-secs [:Date] remove-time) (derive-column :match-label [:Keyword :date-no-secs :DayOfWeek :Country :StrRegion :StrCity] match-label) (derive-column :xsd-datetime [:Date] create-xsd-datetime) (new-tabular/remove-columns [:DayOfWeek :MonthOfYear :City :StrCity :CountryTerritory :Region :StrRegion :Country :Language :Date :flat-date :date-no-secs])))\n\n(defgraft my-graft \"Transformation that converts input CSV data into RDF graph data.\" my-pipe make-graph)","extra":{"customFunctionDeclarations":[{"name":"boolean","clojureCode":"","group":"CONVERT DATATYPE","docstring":"Coerce to boolean","__type":"CustomFunctionDeclaration"},{"name":"capitalize","clojureCode":"","group":"STRING","docstring":"Converts first character of the string to upper-case, all other characters to lower-case.","__type":"CustomFunctionDeclaration"},{"name":"cast","clojureCode":"","group":"CONVERT DATATYPE","docstring":" Throws a ClassCastException if x is not a c, else returns x","__type":"CustomFunctionDeclaration"},{"name":"count","clojureCode":"","group":"COLLECTION","docstring":"Returns the number of items in the collection","__type":"CustomFunctionDeclaration"},{"name":"dec","clojureCode":"","group":"NUMBER","docstring":"Returns a number one less than num","__type":"CustomFunctionDeclaration"},{"name":"double","clojureCode":"","group":"CONVERT DATATYPE","docstring":"Coerce to double","__type":"CustomFunctionDeclaration"},{"name":"double-literal","clojureCode":"(defn double-literal [s] (if (nil? (re-matches #\"[0-9.]+\" s)) 0 (Double/parseDouble s)))","group":"CONVERT DATATYPE","docstring":"Coerce to double. Null and non-valid values are replaced with zero","__type":"CustomFunctionDeclaration"},{"name":"first","clojureCode":"","group":"COLLECTION","docstring":"Returns the first item in the collection","__type":"CustomFunctionDeclaration"},{"name":"float","clojureCode":"","group":"CONVERT DATATYPE","docstring":"Coerce to float","__type":"CustomFunctionDeclaration"},{"name":"inc","clojureCode":"","group":"NUMBER","docstring":"Returns a number one greater than num","__type":"CustomFunctionDeclaration"},{"name":"integer-literal","clojureCode":"(defn integer-literal [s] (if (nil? (re-matches #\"[0-9.]+\" s)) 0 (Integer/parseInt s)))","group":"CONVERT DATATYPE","docstring":"Coerce to integer. Null and non-valid values are replaced with zero","__type":"CustomFunctionDeclaration"},{"name":"join","clojureCode":"(defn join [& strings] (clojure.string/join \" \" strings))","group":"STRING","docstring":"Returns a string of all elements in the collection separated by space.","__type":"CustomFunctionDeclaration"},{"name":"join-with","clojureCode":"(defn join-with [sep] ( fn [& strings] (clojure.string/join sep strings)))","group":"STRING","docstring":"Returns a string of all elements in the collection separated by custom separator.","__type":"CustomFunctionDeclaration"},{"name":"keyword","clojureCode":"","group":"CONVERT DATATYPE","docstring":"Returns a Keyword with the given namespace and name. ","__type":"CustomFunctionDeclaration"},{"name":"last","clojureCode":"","group":"COLLECTION","docstring":"Return the last item in the collection","__type":"CustomFunctionDeclaration"},{"name":"long","clojureCode":"","group":"CONVERT DATATYPE","docstring":"Coerce to long","__type":"CustomFunctionDeclaration"},{"name":"lower-case","clojureCode":"","group":"STRING","docstring":"Converts string to all lower-case","__type":"CustomFunctionDeclaration"},{"name":"name","clojureCode":"","group":"CONVERT DATATYPE","docstring":"Returns the name String of a string, symbol or keyword","__type":"CustomFunctionDeclaration"},{"name":"organize-date","clojureCode":"(defn organize-date \"Transform date dd/mm/yyyy ~> yyyy-mm-dd\" [date] (when (seq date)  (let [[d m y] (clojure.string/split date  (read-string \"#\\\"/\\\"\"))]  (apply str (interpose \"-\" [y m d])))))","group":"DATE FUNCTIONS","docstring":"Transform date dd/mm/yyyy ~> yyyy-mm-dd","__type":"CustomFunctionDeclaration"},{"name":"rem","clojureCode":"","group":"NUMBER","docstring":"Returns remainder of dividing numerator by denominator","__type":"CustomFunctionDeclaration"},{"name":"remove-blanks","clojureCode":"(defn remove-blanks [s]  (when (seq s)  (clojure.string/replace s \" \" \"\")))","group":"STRING","docstring":"Removes blanks in a string","__type":"CustomFunctionDeclaration"},{"name":"replace-varible-string","clojureCode":"(defn replace-varible-string [cell]   (-> cell  (clojure.string/replace (read-string \"#\\\".* #\\\"\") \"number\") (clojure.string/replace (read-string \"#\\\"[0-9]{4} \\\"\") \"\") ))","group":"SERVICE","docstring":"","__type":"CustomFunctionDeclaration"},{"name":"reverse","clojureCode":"","group":"STRING","docstring":"Returns given string with its characters reversed","__type":"CustomFunctionDeclaration"},{"name":"second","clojureCode":"","group":"COLLECTION","docstring":"Returns the second item in the collection","__type":"CustomFunctionDeclaration"},{"name":"short","clojureCode":"","group":"CONVERT DATATYPE","docstring":"Coerce to short","__type":"CustomFunctionDeclaration"},{"name":"str","clojureCode":"","group":"STRING","docstring":"With one arg x, returns x.toString(). (str nil) returns the empty string. With more than one arg, returns the concatenation of the str values of the args.","__type":"CustomFunctionDeclaration"},{"name":"string-literal","clojureCode":"(def string-literal s)","group":"CONVERT DATATYPE","docstring":"Coerce to string","__type":"CustomFunctionDeclaration"},{"name":"stringToNumeric","clojureCode":"(defn stringToNumeric    [x] (if (= \"\" x) nil  (if (.contains x \".\") (Double/parseDouble x)(Integer/parseInt x))))","group":"CONVERT DATATYPE","docstring":"Convert string to numeric","__type":"CustomFunctionDeclaration"},{"name":"titleize","clojureCode":"(defn titleize [st] (when (seq st) (let [a (clojure.string/split st (read-string \"#\\\" \\\"\")) c (map clojure.string/capitalize a)]  (->> c (interpose \" \") (apply str) clojure.string/trim))))","group":"STRING","docstring":"Capitalizes each word in a string","__type":"CustomFunctionDeclaration"},{"name":"transform-gender","clojureCode":"(def transform-gender {\"f\" (s \"female\") \"m\" (s \"male\")})","group":"UTILITY","docstring":"Maps \"f\" to \"female\" and \"m\" to \"male\"","__type":"CustomFunctionDeclaration"},{"name":"trim","clojureCode":"","group":"STRING","docstring":"Removes whitespace from both ends of string","__type":"CustomFunctionDeclaration"},{"name":"trim-newline","clojureCode":"","group":"STRING","docstring":"Removes all trailing newline \n or return \r characters from string","__type":"CustomFunctionDeclaration"},{"name":"triml","clojureCode":"","group":"STRING","docstring":"Removes whitespace from the left side of string","__type":"CustomFunctionDeclaration"},{"name":"trimr","clojureCode":"","group":"STRING","docstring":"Removes whitespace from the right side of string","__type":"CustomFunctionDeclaration"},{"name":"upper-case","clojureCode":"","group":"STRING","docstring":"Converts string to all upper-case","__type":"CustomFunctionDeclaration"},{"name":"get-lat-long-strings-replacement","clojureCode":"(defn get-lat-long-strings-replacement [easting northing hemisphere zoneNumber] (let [utmCoords (. gov.nasa.worldwind.geom.coords.UTMCoord fromUTM (Integer/parseInt zoneNumber) (if (= hemisphere \"N\") \"gov.nasa.worldwind.avkey.North\" (if (= hemisphere \"S\") \"gov.nasa.worldwind.avkey.East\" (throw (Exception. \"Wrong hemisphere input\")))) (Double/parseDouble easting) (Double/parseDouble northing))] (vector (re-pattern easting) (str (.getDegrees (.getLongitude utmCoords))) (re-pattern northing) (str (.getDegrees (.getLatitude utmCoords))))))","group":"SERVICE","docstring":"Produces a pair of replacement coordinates for the given easting, northing, hemisphere letter and zone number","__type":"CustomFunctionDeclaration"},{"name":"replace-several","clojureCode":"(defn replace-several [content replacements] (let [replacement-list (partition 2 replacements)] (reduce (fn [arg1 arg2] (apply clojure.string/replace arg1 arg2)) content replacement-list)))","group":"SERVICE","docstring":"Replace several strings in another string based on a map of replacement pairs (used with \"get-lat-long-strings-replacement\" results to convert coordinates)","__type":"CustomFunctionDeclaration"},{"name":"convert-col-lat-long","clojureCode":"(defn convert-col-lat-long [col hemisphere zoneNumber] (let [all-coords (re-seq (re-pattern \"-?[0-9]{1,13}.[0-9]+\") col)] (replace-several col (flatten (map (fn [coord-pair] (get-lat-long-strings-replacement (nth coord-pair 0) (nth coord-pair 1) hemisphere zoneNumber)) (partition 2 all-coords))))))","group":"SERVICE","docstring":"Convert coordinate pairs in a given cell by input hemisphere string (\"N\" or \"S\") and zone number (e.g., 32)","__type":"CustomFunctionDeclaration"},{"name":"fill-when","clojureCode":"(defn fill-when [col] (grafter.sequences/fill-when col))","group":"SERVICE","docstring":"Takes a sequence of values and copies a value through the sequence depending on the supplied predicate function","__type":"CustomFunctionDeclaration"},{"name":"empty?","clojureCode":"","group":"PREDICATE","docstring":"Returns true if given collection has no items","__type":"CustomFunctionDeclaration"},{"name":"not-empty?","clojureCode":"(def not-empty? (complement empty?))","group":"PREDICATE","docstring":"Returns true if given collection has at least 1 item","__type":"CustomFunctionDeclaration"},{"name":"every?","clojureCode":"","group":"PREDICATE","docstring":"Returns true if first argument predicate is logical true for every x in collection, else false","__type":"CustomFunctionDeclaration"},{"name":"false?","clojureCode":"","group":"PREDICATE","docstring":"Returns true if given value is the value false, false otherwise","__type":"CustomFunctionDeclaration"},{"name":"float?","clojureCode":"","group":"PREDICATE","docstring":"Returns true if given value is a floating point number","__type":"CustomFunctionDeclaration"},{"name":"keyword?","clojureCode":"","group":"PREDICATE","docstring":"Return true if given argument is a Keyword","__type":"CustomFunctionDeclaration"},{"name":"neg?","clojureCode":"","group":"PREDICATE","docstring":"Returns true if argument is less than zero, else false","__type":"CustomFunctionDeclaration"},{"name":"nil?","clojureCode":"","group":"PREDICATE","docstring":"Returns true if argument is nil, false otherwise","__type":"CustomFunctionDeclaration"},{"name":"number?","clojureCode":"","group":"PREDICATE","docstring":"Returns true if argument is a Number","__type":"CustomFunctionDeclaration"},{"name":"odd?","clojureCode":"","group":"PREDICATE","docstring":"Returns true if argument is odd, throws an exception if it is not an integer","__type":"CustomFunctionDeclaration"},{"name":"pos?","clojureCode":"","group":"PREDICATE","docstring":"Returns true if argument is greater than zero, else false","__type":"CustomFunctionDeclaration"},{"name":"ratio?","clojureCode":"","group":"PREDICATE","docstring":"Returns true if argument is a Ratio","__type":"CustomFunctionDeclaration"},{"name":"rational?","clojureCode":"","group":"PREDICATE","docstring":"Returns true if argument is a rational number","__type":"CustomFunctionDeclaration"},{"name":"string?","clojureCode":"","group":"PREDICATE","docstring":"Return true if argument is a String","__type":"CustomFunctionDeclaration"},{"name":"true?","clojureCode":"","group":"PREDICATE","docstring":"Returns true if argument is the value true, false otherwise","__type":"CustomFunctionDeclaration"},{"name":"zero?","clojureCode":"","group":"PREDICATE","docstring":"Returns true if argument is zero, else false","__type":"CustomFunctionDeclaration"},{"name":"+","clojureCode":"","group":"NUMBER","docstring":"","__type":"CustomFunctionDeclaration"},{"name":"-","clojureCode":"","group":"NUMBER","docstring":"","__type":"CustomFunctionDeclaration"},{"name":"*","clojureCode":"","group":"NUMBER","docstring":"","__type":"CustomFunctionDeclaration"},{"name":"/","clojureCode":"","group":"NUMBER","docstring":"","__type":"CustomFunctionDeclaration"},{"name":"remove-dashes","clojureCode":"(defn remove-dashes \"Transforms text\" [s]  (->   s   (clojure.string/replace \"--\" \"\") ))","group":"UTILITY","docstring":"Transforms text","__type":"CustomFunctionDeclaration"},{"name":"analyse-object","clojureCode":"(defn analyse-object \"\" [] ())","group":"UTILITY","docstring":"","__type":"CustomFunctionDeclaration"},{"name":"flatten-date","clojureCode":"(defn flatten-date \"Transforms text\" [s]  (->   s   (clojure.string/replace \"-\" \"\") (clojure.string/replace \":\" \"\") (clojure.string/replace \" \" \"\") (clojure.string/replace \"\" \"\") ))","group":"UTILITY","docstring":"Transforms text","__type":"CustomFunctionDeclaration"},{"name":"match-label","clojureCode":"(defn match-label \"\" [keyword date day country region city] (str \"Match of keyword '\" keyword \"' on \" date \"(\" day \") in \" country \"/\" region \"/\" city))","group":"UTILITY","docstring":"","__type":"CustomFunctionDeclaration"},{"name":"remove-time","clojureCode":"(defn remove-time \"Transforms text\" [s]  (->   s   (clojure.string/replace \"00:00:00\" \"\") ))","group":"UTILITY","docstring":"Transforms text","__type":"CustomFunctionDeclaration"},{"name":"create-xsd-datetime","clojureCode":"(defn create-xsd-datetime \"Transforms text\" [s]  (->   s   (clojure.string/replace \" \" \"T\") ))","group":"UTILITY","docstring":"Transforms text","__type":"CustomFunctionDeclaration"},{"name":"create-match-id","clojureCode":"(defn create-match-id \"\" [adgr kw city country region lang date] (str adgr \"-\" kw \"-\" city \"-\" country \"-\" region \"-\" lang \"-\" date))","group":"UTILITY","docstring":"","__type":"CustomFunctionDeclaration"}],"prefixers":[],"pipelines":[{"functions":[{"name":"make-dataset","displayName":"make-dataset","isPreviewed":false,"columnsArray":[{"id":0,"value":"AdGroupId"},{"id":1,"value":"KeywordId"},{"id":2,"value":"City"},{"id":3,"value":"CountryTerritory"},{"id":4,"value":"Region"},{"id":5,"value":"StrRegion"},{"id":6,"value":"StrCity"},{"id":7,"value":"Country"},{"id":8,"value":"Language"},{"id":9,"value":"Category"},{"id":10,"value":"CampaignName"},{"id":11,"value":"Date"},{"id":12,"value":"DayOfWeek"},{"id":13,"value":"MonthOfYear"},{"id":14,"value":"Keyword"},{"id":15,"value":"MatchType"},{"id":16,"value":"Clicks"},{"id":17,"value":"Impressions"},{"id":18,"value":"GoogleAdPosition"}],"useLazy":false,"moveFirstRowToHeader":false,"__type":"MakeDatasetFunction","docstring":"Make dataset","$$hashKey":"object:164"},{"isPreviewed":false,"indexFrom":0,"indexTo":1,"name":"drop-rows","displayName":"drop-rows","docstring":"Drop rows with indices from 0 to 1","take":false,"__type":"DropRowsFunction","$$hashKey":"object:165","fabIsOpen":false},{"isPreviewed":false,"name":"mapc","displayName":"mapc","docstring":"Map columns","keyFunctionPairs":[{"key":{"id":2,"value":"City"},"func":{"id":59,"name":"remove-dashes","group":"UTILITY","clojureCode":"(defn remove-dashes \"Transforms text\" [s]  (->   s   (clojure.string/replace \"--\" \"\") ))"},"funcParams":[],"__type":"KeyFunctionPair"},{"key":{"id":7,"value":"DayOfWeek"},"func":{"id":30,"name":"trim","group":"STRING","clojureCode":""},"funcParams":[],"__type":"KeyFunctionPair"},{"key":{"id":11,"value":"Clicks"},"func":{"id":30,"name":"trim","group":"STRING","clojureCode":""},"funcParams":[],"__type":"KeyFunctionPair"},{"key":{"id":12,"value":"Impressions"},"func":{"id":30,"name":"trim","group":"STRING","clojureCode":""},"funcParams":[],"__type":"KeyFunctionPair"},{"key":{"id":6,"value":"Date"},"func":{"id":30,"name":"trim","group":"STRING","clojureCode":""},"funcParams":[],"__type":"KeyFunctionPair"},{"key":{"id":18,"value":"GoogleAdPosition"},"func":{"id":30,"name":"trim","group":"STRING","clojureCode":""},"funcParams":[],"__type":"KeyFunctionPair"},{"key":{"id":1,"value":"KeywordId"},"func":{"id":30,"name":"trim","group":"STRING","clojureCode":""},"funcParams":[],"__type":"KeyFunctionPair"}],"__type":"MapcFunction","$$hashKey":"object:166","fabIsOpen":false},{"isPreviewed":false,"newColName":"flat-date","colsToDeriveFrom":[{"id":11,"value":"Date"}],"name":"derive-column","displayName":"derive-column","functionsToDeriveWith":[{"funct":{"id":61,"name":"flatten-date","group":"UTILITY","clojureCode":"(defn flatten-date \"Transforms text\" [s]  (->   s   (clojure.string/replace \"-\" \"\") (clojure.string/replace \":\" \"\") (clojure.string/replace \" \" \"\") (clojure.string/replace \"\" \"\") ))"},"functParams":[],"__type":"FunctionWithArgs"}],"__type":"DeriveColumnFunction","docstring":"Derive column flat-date from column(s) Date ","$$hashKey":"object:167"},{"isPreviewed":false,"newColName":"match-id","colsToDeriveFrom":[{"id":0,"value":"AdGroupId"},{"id":1,"value":"KeywordId"},{"id":2,"value":"City"},{"id":3,"value":"CountryTerritory"},{"id":4,"value":"Region"},{"id":7,"value":"Country"},{"id":19,"value":"flat-date"}],"name":"derive-column","displayName":"derive-column","functionsToDeriveWith":[{"funct":{"id":65,"name":"create-match-id","group":"UTILITY","clojureCode":"(defn create-match-id \"\" [adgr kw city country region lang date] ())"},"functParams":[],"__type":"FunctionWithArgs"}],"__type":"DeriveColumnFunction","docstring":"Derive column match-id from column(s) AdGroupId KeywordId City CountryTerritory Region Country flat-date ","$$hashKey":"object:168"},{"isPreviewed":false,"newColName":"date-no-secs","colsToDeriveFrom":[{"id":6,"value":"Date"}],"name":"derive-column","displayName":"derive-column","functionsToDeriveWith":[{"funct":{"id":63,"name":"remove-time","group":"UTILITY","clojureCode":"(defn remove-time \"Transforms text\" [s]  (->   s   (clojure.string/replace \"00:00:00\" \"\") ))"},"functParams":[],"__type":"FunctionWithArgs"}],"__type":"DeriveColumnFunction","docstring":"Derive column date-no-secs from column(s) Date ","$$hashKey":"object:169","fabIsOpen":false},{"isPreviewed":false,"newColName":"match-label","colsToDeriveFrom":[{"id":9,"value":"Keyword"},{"id":14,"value":"date-no-secs"},{"id":7,"value":"DayOfWeek"},{"id":3,"value":"Country"},{"id":1,"value":"StrRegion"},{"id":2,"value":"StrCity"}],"name":"derive-column","displayName":"derive-column","functionsToDeriveWith":[{"funct":{"id":62,"name":"match-label","group":"UTILITY","clojureCode":"(defn match-label \"\" [keyword date day country region city] (str \"Match of keyword '\" keyword \"' on \" date \"(\" day \") in \" country \"/\" region \"/\" city))"},"functParams":[],"__type":"FunctionWithArgs"}],"__type":"DeriveColumnFunction","docstring":"Derive column match-label from column(s) Keyword date-no-secs DayOfWeek Country StrRegion StrCity ","$$hashKey":"object:170","fabIsOpen":false},{"isPreviewed":false,"newColName":"xsd-datetime","colsToDeriveFrom":[{"id":6,"value":"Date"}],"name":"derive-column","displayName":"derive-column","functionsToDeriveWith":[{"funct":{"id":64,"name":"create-xsd-datetime","group":"UTILITY","clojureCode":"(defn create-xsd-datetime \"Transforms text\" [s]  (->   s   (clojure.string/replace \" \" \"T\") ))"},"functParams":[],"__type":"FunctionWithArgs"}],"__type":"DeriveColumnFunction","docstring":"Derive column xsd-datetime from column(s) Date ","$$hashKey":"object:171","fabIsOpen":false},{"name":"columns","displayName":"remove-columns","isPreviewed":false,"columnsArray":[{"id":12,"value":"DayOfWeek"},{"id":13,"value":"MonthOfYear"},{"id":2,"value":"City"},{"id":6,"value":"StrCity"},{"id":3,"value":"CountryTerritory"},{"id":4,"value":"Region"},{"id":5,"value":"StrRegion"},{"id":7,"value":"Country"},{"id":8,"value":"Language"},{"id":11,"value":"Date"},{"id":0,"value":"flat-date"},{"id":1,"value":"date-no-secs"}],"indexFrom":null,"indexTo":null,"take":false,"__type":"ColumnsFunction","docstring":"Narrow dataset to  columns: DayOfWeek MonthOfYear","$$hashKey":"object:172","fabIsOpen":false}],"__type":"Pipeline"}],"graphs":[{"graphURI":"http://jot-im.com/","graphRoots":[{"subElements":[{"subElements":[{"subElements":[],"prefix":"google","constant":"AdWord","nodeCondition":[],"__type":"ConstantURI","$$hashKey":"object:778"}],"prefix":"rdf","propertyName":"type","propertyCondition":[],"__type":"Property","$$hashKey":"object:534"},{"subElements":[{"subElements":[],"literalValue":{"id":14,"value":"Keyword"},"datatype":{"id":9,"name":"string"},"onEmpty":"","onError":null,"langTag":"en","datatypeURI":"","nodeCondition":[],"__type":"ColumnLiteral","$$hashKey":"object:803"}],"prefix":"rdf","propertyName":"label","propertyCondition":[],"__type":"Property","$$hashKey":"object:535"},{"subElements":[{"subElements":[],"prefix":"jot","column":{"id":0,"value":"AdGroupId"},"nodeCondition":[],"__type":"ColumnURI","$$hashKey":"object:828"}],"prefix":"jot","propertyName":"belongsToAdGroup","propertyCondition":[],"__type":"Property","$$hashKey":"object:536"},{"subElements":[{"subElements":[],"prefix":"google","column":{"id":9,"value":"match-id"},"nodeCondition":[],"__type":"ColumnURI","$$hashKey":"object:858"}],"prefix":"jot","propertyName":"hasMatch","propertyCondition":[],"__type":"Property","$$hashKey":"object:537"}],"prefix":"jot","column":{"id":1,"value":"KeywordId"},"nodeCondition":[],"__type":"ColumnURI","$$hashKey":"object:477"},{"subElements":[{"subElements":[{"subElements":[],"prefix":"google","constant":"AdGroup","nodeCondition":[],"__type":"ConstantURI","$$hashKey":"object:888"}],"prefix":"rdf","propertyName":"type","propertyCondition":[],"__type":"Property","$$hashKey":"object:563"},{"subElements":[{"subElements":[],"prefix":"jot","constant":"Campaign","nodeCondition":[],"__type":"ConstantURI","$$hashKey":"object:913"}],"prefix":"rdf","propertyName":"type","propertyCondition":[],"__type":"Property","$$hashKey":"object:564"},{"subElements":[{"subElements":[],"literalValue":{"id":10,"value":"CampaignName"},"datatype":{"id":9,"name":"string"},"onEmpty":null,"onError":null,"langTag":"en","datatypeURI":"","nodeCondition":[],"__type":"ColumnLiteral","$$hashKey":"object:938"}],"prefix":"rdf","propertyName":"label","propertyCondition":[],"__type":"Property","$$hashKey":"object:565"},{"subElements":[{"subElements":[],"prefix":"jot","column":{"id":9,"value":"Category"},"nodeCondition":[],"__type":"ColumnURI","$$hashKey":"object:963"}],"prefix":"jot","propertyName":"category","propertyCondition":[],"__type":"Property","$$hashKey":"object:566"}],"prefix":"jot","column":{"id":0,"value":"AdGroupId"},"nodeCondition":[],"__type":"ColumnURI","$$hashKey":"object:478"},{"subElements":[{"subElements":[{"subElements":[],"prefix":"jot","constant":"Category","nodeCondition":[],"__type":"ConstantURI","$$hashKey":"object:993"}],"prefix":"rdf","propertyName":"type","propertyCondition":[],"__type":"Property","$$hashKey":"object:592"},{"subElements":[{"subElements":[],"literalValue":{"id":9,"value":"Category"},"datatype":{"id":9,"name":"string"},"onEmpty":null,"onError":null,"langTag":"en","datatypeURI":"","nodeCondition":[],"__type":"ColumnLiteral","$$hashKey":"object:1018"}],"prefix":"rdf","propertyName":"label","propertyCondition":[],"__type":"Property","$$hashKey":"object:593"}],"prefix":"jot","column":{"id":9,"value":"Category"},"nodeCondition":[],"__type":"ColumnURI","$$hashKey":"object:479"},{"subElements":[{"subElements":[{"subElements":[],"prefix":"google","constant":"AdWordMatch","nodeCondition":[],"__type":"ConstantURI","$$hashKey":"object:1043"}],"prefix":"rdf","propertyName":"type","propertyCondition":[],"__type":"Property","$$hashKey":"object:615"},{"subElements":[{"subElements":[],"literalValue":{"id":15,"value":"match-label"},"datatype":{"id":9,"name":"string"},"onEmpty":null,"onError":null,"langTag":"en","datatypeURI":"","nodeCondition":[],"__type":"ColumnLiteral","$$hashKey":"object:1068"}],"prefix":"rdf","propertyName":"label","propertyCondition":[],"__type":"Property","$$hashKey":"object:616"},{"subElements":[{"subElements":[],"literalValue":{"id":10,"value":"MatchType"},"datatype":{"id":9,"name":"string"},"onEmpty":null,"onError":null,"langTag":"en","datatypeURI":"","nodeCondition":[],"__type":"ColumnLiteral","$$hashKey":"object:1093"}],"prefix":"google","propertyName":"matchType","propertyCondition":[],"__type":"Property","$$hashKey":"object:617"},{"subElements":[{"subElements":[],"literalValue":{"id":11,"value":"Clicks"},"datatype":{"id":9,"name":"string"},"onEmpty":"0","onError":"0","langTag":"en","datatypeURI":"","nodeCondition":[],"__type":"ColumnLiteral","$$hashKey":"object:1118"}],"prefix":"google","propertyName":"numberOfClicks","propertyCondition":[],"__type":"Property","$$hashKey":"object:618"},{"subElements":[{"subElements":[],"literalValue":{"id":12,"value":"Impressions"},"datatype":{"id":9,"name":"string"},"onEmpty":"0","onError":"0","langTag":"","datatypeURI":"","nodeCondition":[],"__type":"ColumnLiteral","$$hashKey":"object:1143"}],"prefix":"google","propertyName":"numberOfImpressions","propertyCondition":[],"__type":"Property","$$hashKey":"object:619"},{"subElements":[{"subElements":[],"literalValue":{"id":13,"value":"GoogleAdPosition"},"datatype":{"id":9,"name":"string"},"onEmpty":"0.0","onError":"0.0","langTag":"","datatypeURI":"","nodeCondition":[{"column":{"id":13,"value":"GoogleAdPosition"},"operator":{"id":0,"name":"Not empty"},"operand":"","conj":null,"__type":"Condition"}],"__type":"ColumnLiteral","$$hashKey":"object:1168"}],"prefix":"google","propertyName":"adPosition","propertyCondition":[],"__type":"Property","$$hashKey":"object:620"},{"subElements":[{"subElements":[],"literalValue":{"id":16,"value":"xsd-datetime"},"datatype":{"id":8,"name":"date"},"onEmpty":"","onError":"","langTag":"","datatypeURI":"","nodeCondition":[],"__type":"ColumnLiteral","$$hashKey":"object:1193"}],"prefix":"dbp","propertyName":"date","propertyCondition":[],"__type":"Property","$$hashKey":"object:621"}],"prefix":"google","column":{"id":0,"value":"match-id"},"nodeCondition":[],"__type":"ColumnURI","$$hashKey":"object:480"}],"__type":"Graph","$$hashKey":"object:463"}],"rdfVocabs":[{"name":"sioc","classes":[],"namespace":"http://rdfs.org/sioc/ns","fromServer":true,"properties":[]},{"name":"dc","classes":[],"namespace":"http://purl.org/dc/terms/","fromServer":true,"properties":[]},{"name":"foaf","classes":[],"namespace":"http://xmlns.com/foaf/0.1/","fromServer":true,"properties":[]},{"name":"prov","classes":[],"namespace":"http://www.w3.org/ns/prov#","fromServer":true,"properties":[]},{"name":"time","classes":[],"namespace":"http://www.w3.org/2006/time","fromServer":true,"properties":[]},{"name":"bibo","classes":[],"namespace":"http://purl.org/ontology/bibo/","fromServer":true,"properties":[]},{"name":"rdf","classes":[],"namespace":"http://www.w3.org/1999/02/22-rdf-syntax-ns#","fromServer":true,"properties":[]},{"name":"rss","classes":[],"namespace":"http://purl.org/rss/1.0/","fromServer":true,"properties":[]},{"name":"geo","classes":[],"namespace":"http://www.w3.org/2003/01/geo/wgs84_pos#","fromServer":true,"properties":[]},{"name":"frbr","classes":[],"namespace":"http://purl.org/vocab/frbr/core#","fromServer":true,"properties":[]},{"name":"rdfs","classes":[],"namespace":"http://www.w3.org/2000/01/rdf-schema#","fromServer":true,"properties":[]},{"name":"skos","classes":[],"namespace":"http://www.w3.org/2004/02/skos/core#","fromServer":true,"properties":[]},{"name":"org","classes":[],"namespace":"http://www.w3.org/ns/org#","fromServer":true,"properties":[]},{"name":"owl","classes":[],"namespace":"http://www.w3.org/2002/07/owl#","fromServer":true,"properties":[]},{"name":"jot","namespace":"http://jot-im.com/rdf-example#","fromServer":false},{"name":"google","namespace":"https://www.google.com/rdf#","fromServer":false},{"name":"dbp","namespace":"http://dbpedia.org/ontology/","fromServer":false},{"name":"sioc","classes":[],"namespace":"http://rdfs.org/sioc/ns","fromServer":true,"properties":[]},{"name":"dc","classes":[],"namespace":"http://purl.org/dc/terms/","fromServer":true,"properties":[]},{"name":"foaf","classes":[],"namespace":"http://xmlns.com/foaf/0.1/","fromServer":true,"properties":[]},{"name":"prov","classes":[],"namespace":"http://www.w3.org/ns/prov#","fromServer":true,"properties":[]},{"name":"time","classes":[],"namespace":"http://www.w3.org/2006/time","fromServer":true,"properties":[]},{"name":"bibo","classes":[],"namespace":"http://purl.org/ontology/bibo/","fromServer":true,"properties":[]},{"name":"rdf","classes":[],"namespace":"http://www.w3.org/1999/02/22-rdf-syntax-ns#","fromServer":true,"properties":[]},{"name":"rss","classes":[],"namespace":"http://purl.org/rss/1.0/","fromServer":true,"properties":[]},{"name":"geo","classes":[],"namespace":"http://www.w3.org/2003/01/geo/wgs84_pos#","fromServer":true,"properties":[]},{"name":"frbr","classes":[],"namespace":"http://purl.org/vocab/frbr/core#","fromServer":true,"properties":[]},{"name":"rdfs","classes":[],"namespace":"http://www.w3.org/2000/01/rdf-schema#","fromServer":true,"properties":[]},{"name":"skos","classes":[],"namespace":"http://www.w3.org/2004/02/skos/core#","fromServer":true,"properties":[]},{"name":"org","classes":[],"namespace":"http://www.w3.org/ns/org#","fromServer":true,"properties":[]},{"name":"owl","classes":[],"namespace":"http://www.w3.org/2002/07/owl#","fromServer":true,"properties":[]},{"name":"sioc","classes":[],"namespace":"http://rdfs.org/sioc/ns","fromServer":true,"properties":[]},{"name":"dc","classes":[],"namespace":"http://purl.org/dc/terms/","fromServer":true,"properties":[]},{"name":"foaf","classes":[],"namespace":"http://xmlns.com/foaf/0.1/","fromServer":true,"properties":[]},{"name":"prov","classes":[],"namespace":"http://www.w3.org/ns/prov#","fromServer":true,"properties":[]},{"name":"time","classes":[],"namespace":"http://www.w3.org/2006/time","fromServer":true,"properties":[]},{"name":"bibo","classes":[],"namespace":"http://purl.org/ontology/bibo/","fromServer":true,"properties":[]},{"name":"rdf","classes":[],"namespace":"http://www.w3.org/1999/02/22-rdf-syntax-ns#","fromServer":true,"properties":[]},{"name":"rss","classes":[],"namespace":"http://purl.org/rss/1.0/","fromServer":true,"properties":[]},{"name":"geo","classes":[],"namespace":"http://www.w3.org/2003/01/geo/wgs84_pos#","fromServer":true,"properties":[]},{"name":"frbr","classes":[],"namespace":"http://purl.org/vocab/frbr/core#","fromServer":true,"properties":[]},{"name":"rdfs","classes":[],"namespace":"http://www.w3.org/2000/01/rdf-schema#","fromServer":true,"properties":[]},{"name":"skos","classes":[],"namespace":"http://www.w3.org/2004/02/skos/core#","fromServer":true,"properties":[]},{"name":"org","classes":[],"namespace":"http://www.w3.org/ns/org#","fromServer":true,"properties":[]},{"name":"owl","classes":[],"namespace":"http://www.w3.org/2002/07/owl#","fromServer":true,"properties":[]},{"name":"sioc","classes":[],"namespace":"http://rdfs.org/sioc/ns","fromServer":true,"properties":[]},{"name":"dc","classes":[],"namespace":"http://purl.org/dc/terms/","fromServer":true,"properties":[]},{"name":"foaf","classes":[],"namespace":"http://xmlns.com/foaf/0.1/","fromServer":true,"properties":[]},{"name":"prov","classes":[],"namespace":"http://www.w3.org/ns/prov#","fromServer":true,"properties":[]},{"name":"time","classes":[],"namespace":"http://www.w3.org/2006/time","fromServer":true,"properties":[]},{"name":"bibo","classes":[],"namespace":"http://purl.org/ontology/bibo/","fromServer":true,"properties":[]},{"name":"rdf","classes":[],"namespace":"http://www.w3.org/1999/02/22-rdf-syntax-ns#","fromServer":true,"properties":[]},{"name":"rss","classes":[],"namespace":"http://purl.org/rss/1.0/","fromServer":true,"properties":[]},{"name":"geo","classes":[],"namespace":"http://www.w3.org/2003/01/geo/wgs84_pos#","fromServer":true,"properties":[]},{"name":"frbr","classes":[],"namespace":"http://purl.org/vocab/frbr/core#","fromServer":true,"properties":[]},{"name":"rdfs","classes":[],"namespace":"http://www.w3.org/2000/01/rdf-schema#","fromServer":true,"properties":[]},{"name":"skos","classes":[],"namespace":"http://www.w3.org/2004/02/skos/core#","fromServer":true,"properties":[]},{"name":"org","classes":[],"namespace":"http://www.w3.org/ns/org#","fromServer":true,"properties":[]},{"name":"owl","classes":[],"namespace":"http://www.w3.org/2002/07/owl#","fromServer":true,"properties":[]},{"name":"sioc","namespace":"http://rdfs.org/sioc/ns","fromServer":true,"properties":[],"classes":[]},{"name":"dc","namespace":"http://purl.org/dc/terms/","fromServer":true,"properties":[],"classes":[]},{"name":"foaf","namespace":"http://xmlns.com/foaf/0.1/","fromServer":true,"properties":[],"classes":[]},{"name":"prov","namespace":"http://www.w3.org/ns/prov#","fromServer":true,"properties":[],"classes":[]},{"name":"time","namespace":"http://www.w3.org/2006/time","fromServer":true,"properties":[],"classes":[]},{"name":"bibo","namespace":"http://purl.org/ontology/bibo/","fromServer":true,"properties":[],"classes":[]},{"name":"rdf","namespace":"http://www.w3.org/1999/02/22-rdf-syntax-ns#","fromServer":true,"properties":[],"classes":[]},{"name":"rss","namespace":"http://purl.org/rss/1.0/","fromServer":true,"properties":[],"classes":[]},{"name":"geo","namespace":"http://www.w3.org/2003/01/geo/wgs84_pos#","fromServer":true,"properties":[],"classes":[]},{"name":"frbr","namespace":"http://purl.org/vocab/frbr/core#","fromServer":true,"properties":[],"classes":[]},{"name":"rdfs","namespace":"http://www.w3.org/2000/01/rdf-schema#","fromServer":true,"properties":[],"classes":[]},{"name":"skos","namespace":"http://www.w3.org/2004/02/skos/core#","fromServer":true,"properties":[],"classes":[]},{"name":"org","namespace":"http://www.w3.org/ns/org#","fromServer":true,"properties":[],"classes":[]},{"name":"owl","namespace":"http://www.w3.org/2002/07/owl#","fromServer":true,"properties":[],"classes":[]}],"__type":"Transformation"}}
